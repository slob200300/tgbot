import telebot
from telebot import types
import re
import smtplib
from email.mime.text import MIMEText
from config import admin_email, email_password

class PatientRegistration:
    def __init__(self, bot, menu_keyboard_func):
        self.bot = bot
        self.menu_keyboard = menu_keyboard_func
        self.name = ''
        self.surname = ''
        self.father_name = ''
        self.phone = None
        self.med_profile_selected = None
        self.type_of_reception_selected = None
        self.med_profile = [
            '–ê–∫—É—à–µ—Ä-–ì–∏–Ω–µ–∫–æ–ª–æ–≥', '–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥', 
            '–ì–µ–º–∞—Ç–æ–ª–æ–≥', '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥', '–ö–∞—Ä–¥–∏–æ–ª–æ–≥', 
            '–ù–µ–≤—Ä–æ–ª–æ–≥', '–ù–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥', '–û—Ç–æ—Ä–∏–Ω–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥', 
            '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥', '–ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥', 
            '–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–π —Ö–∏—Ä—É—Ä–≥', '–¢–æ—Ä–∞–∫–∞–ª—å–Ω—ã–π —Ö–∏—Ä—É—Ä–≥', 
            '–¢—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥-–æ—Ä—Ç–æ–ø–µ–¥', '–£—Ä–æ–ª–æ–≥', 
            '–•–∏—Ä—É—Ä–≥', '–ß–µ–ª—é—Å—Ç–Ω–æ-–ª–∏—Ü–µ–≤–æ–π —Ö–∏—Ä—É—Ä–≥', 
            '–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥'
        ]
        self.type_of_reception = ['OMC', '–ó–∞ —Å—á–µ—Ç –ª–∏—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤']
        self.last_answer = ['–î–∞', '–ù–µ—Ç']

    def start_registration(self, message):
        self.bot.send_message(message.from_user.id, '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?', reply_markup=self.registration_keyboard())
        self.bot.register_next_step_handler(message, self.get_name)

    def registration_keyboard(self):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        stop_button = types.KeyboardButton('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        keyboard.add(stop_button)
        return keyboard

    def get_name(self, message):
        if message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
            self.stop_registration(message)
            return 
        if not self.is_valid_name(message.text):
            self.bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return self.bot.register_next_step_handler(message, self.get_name)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        self.name = message.text
        self.bot.send_message(message.from_user.id, '–ö–∞–∫–∞—è —É –≤–∞—Å —Ñ–∞–º–∏–ª–∏—è?')
        self.bot.register_next_step_handler(message, self.get_surname)

    def get_surname(self, message):
        if message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
            self.stop_registration(message)
            return
        if not self.is_valid_name(message.text):
            self.bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return self.bot.register_next_step_handler(message, self.get_surname)
        self.surname = message.text
        self.bot.send_message(message.from_user.id, '–ö–∞–∫–æ–µ —É –≤–∞—Å –æ—Ç—á–µ—Å—Ç–≤–æ?')
        self.bot.register_next_step_handler(message, self.get_father_name)

    def get_father_name(self, message):
        if message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
            self.stop_registration(message)
            return
        if not self.is_valid_name(message.text):
            self.bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –û—Ç—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return self.bot.register_next_step_handler(message, self.get_father_name)
        self.father_name = message.text
        self.bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 71234567890')
        self.bot.register_next_step_handler(message, self.get_phone)

    def get_phone(self, message):
        if message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
            self.stop_registration(message)
            return
        if not self.is_valid_phone(message.text) or len(message.text) != 11:
            self.bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 11 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return self.bot.register_next_step_handler(message, self.get_phone)
        self.phone = message.text
        self.bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=self.med_profile_keyboard())
        self.bot.register_next_step_handler(message, self.get_med_profile)

    def med_profile_keyboard(self):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        stop_button = types.KeyboardButton('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        keyboard.add(stop_button)
        for profile in self.med_profile:
            keyboard.add(types.KeyboardButton(profile))
        return keyboard

    def get_med_profile(self, message):
        if message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
            self.stop_registration(message)
            return
        if message.text not in self.med_profile:
            self.bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.')
            return self.bot.register_next_step_handler(message, self.get_med_profile)
        self.med_profile_selected = message.text
        self.bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞', reply_markup=self.type_of_reception_keyboard())
        self.bot.register_next_step_handler(message, self.get_type_of_reception)

    def type_of_reception_keyboard(self):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        stop_button = types.KeyboardButton('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        keyboard.add(stop_button)
        for reception in self.type_of_reception:
            keyboard.add(types.KeyboardButton(reception))
        return keyboard

    def get_type_of_reception(self, message):
        if message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
            self.stop_registration(message)
            return
        if message.text not in self.type_of_reception:
            self.bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.')
            return self.bot.register_next_step_handler(message, self.get_type_of_reception)
        self.type_of_reception_selected = message.text
        info = (f"–ò–º—è: {self.name}\n–§–∞–º–∏–ª–∏—è: {self.surname}\n–û—Ç—á–µ—Å—Ç–≤–æ: {self.father_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {self.phone}\n–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å: {getattr(self, 'med_profile_selected', '–ù–µ –≤—ã–±—Ä–∞–Ω')}\n"
        f"–¢–∏–ø –ø—Ä–∏–µ–º–∞: {getattr(self, 'type_of_reception_selected', '–ù–µ –≤—ã–±—Ä–∞–Ω')}")
        self.bot.send_message(message.from_user.id, info)
        self.bot.send_message(message.from_user.id, '–£–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?', reply_markup=self.last_answer_keyboard())
        self.bot.register_next_step_handler(message, self.get_type_last_answer)

    def last_answer_keyboard(self):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        stop_button = types.KeyboardButton('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        keyboard.add(stop_button)
        for answer in self.last_answer:
            keyboard.add(types.KeyboardButton(answer))
        return keyboard

    def get_type_last_answer(self, message):
        if message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
            self.stop_registration(message)
            return
        if message.text not in self.last_answer:
            self.bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –æ—Ç–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.')
            return self.bot.register_next_step_handler(message, self.get_type_last_answer)
        if message.text == '–î–∞':
            self.display_patient_info(message.chat.id)
        elif message.text == '–ù–µ—Ç':
            self.start_registration(message)

    def stop_registration(self, message):
        self.bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=self.menu_keyboard())

    def display_patient_info(self, chat_id):
        #info = (f"–ò–º—è: {self.name}\n–§–∞–º–∏–ª–∏—è: {self.surname}\n–û—Ç—á–µ—Å—Ç–≤–æ: {self.father_name}\n"
          #      f"–¢–µ–ª–µ—Ñ–æ–Ω: {self.phone}\n–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å: {getattr(self, 'med_profile_selected', '–ù–µ –≤—ã–±—Ä–∞–Ω')}\n"
          #      f"–¢–∏–ø –ø—Ä–∏–µ–º–∞: {getattr(self, 'type_of_reception_selected', '–ù–µ –≤—ã–±—Ä–∞–Ω')}")
      #  self.bot.send_message(chat_id, info)
        self.send_email()
        self.bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã, –∂–¥–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", reply_markup=self.menu_keyboard())

    def is_valid_name(self, name):
        return bool(re.match("^[–ê-–Ø–∞-—è–Å—ë\s-]+$", name))

    def is_valid_phone(self, phone):
        return phone.isdigit()

    def send_email(self):
        subject = "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º"
        body = (f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º:\n"
                f"–ò–º—è: {self.name}\n"
                f"–§–∞–º–∏–ª–∏—è: {self.surname}\n"
                f"–û—Ç—á–µ—Å—Ç–≤–æ: {self.father_name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {self.phone}\n"
                f"–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {getattr(self, 'med_profile_selected', '–ù–µ –≤—ã–±—Ä–∞–Ω')}\n"
                f"–¢–∏–ø –ø—Ä–∏–µ–º–∞: {getattr(self, 'type_of_reception_selected', '–ù–µ –≤—ã–±—Ä–∞–Ω')}")

        msg = MIMEText(body)
        msg['Subject'] = subject
        msg['From'] = admin_email
        msg['To'] = admin_email

        try:
            with smtplib.SMTP('smtp.office365.com', 587) as server:
                server.starttls()
                server.login(admin_email, email_password)
                server.send_message(msg)
            print("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ: {e}")