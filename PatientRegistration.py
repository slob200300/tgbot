import re
import logging
import numpy as np
from aiogram import types, F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import KeyboardButton, Message, FSInputFile
from PIL import Image
import cv2
from config import admin_email, email_password, example_path
from tgbot import submenu_keyboard
from TextRecognition import image_to_text as ITT
from SendMail import send_email


logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
router1 = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
class RegistrationStates(StatesGroup):
    waiting_for_fio = State()
    waiting_for_phone = State()
    waiting_for_type_of_reception = State()
    waiting_for_photo = State()
    waiting_for_med_profile = State()
    waiting_for_additional_info = State()
    waiting_for_confirmation = State()


STOP_REGISTRATION_BUTTON = 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'


med_profile_options = [
    '–ê–∫—É—à–µ—Ä-–ì–∏–Ω–µ–∫–æ–ª–æ–≥', '–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥', '–ì–µ–º–∞—Ç–æ–ª–æ–≥',
    '–î–µ—Ä–º–∞—Ç–æ–≤–µ–Ω–µ—Ä–æ–ª–æ–≥', '–ö–∞—Ä–¥–∏–æ–ª–æ–≥', '–ù–µ–≤—Ä–æ–ª–æ–≥',
    '–ù–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥', '–û—Ç–æ—Ä–∏–Ω–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥', '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥',
    '–ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥', '–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–π —Ö–∏—Ä—É—Ä–≥', 
    '–¢–æ—Ä–∞–∫–∞–ª—å–Ω—ã–π —Ö–∏—Ä—É—Ä–≥', '–¢—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥', '–£—Ä–æ–ª–æ–≥', 
    '–•–∏—Ä—É—Ä–≥', '–ß–µ–ª—é—Å—Ç–Ω–æ-–ª–∏—Ü–µ–≤–æ–π —Ö–∏—Ä—É—Ä–≥', '–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥'
]
type_of_reception_options = ['OMC (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)', '–ó–∞ —Å—á–µ—Ç –ª–∏—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤', '–î–ú–° / –î–æ–≥–æ–≤–æ—Ä —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π']
last_answer_options = ['–î–∞', '–ù–µ—Ç']
# user_photo_path = '/home/sou-3.2-2/chatbot/user_photo.jpg'

def create_keyboard(buttons):
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text=STOP_REGISTRATION_BUTTON))
    for button in buttons:
        keyboard.add(KeyboardButton(text=button))
    return keyboard.adjust(1).as_markup(resize_keyboard=True)
def is_valid_type(message):
    return message.content_type == 'text'

def is_valid_name(name):
    return bool(re.match(r"^[–ê-–Ø–∞-—è–Å—ë\s-]+$", name))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def is_valid_phone(phone):
    return bool(re.match(r"^\d+$", phone))


@router1.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –≤—Ä–∞—á–∞")
async def reception(message: Message, state: FSMContext):
    await message.answer("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    await state.set_state(RegistrationStates.waiting_for_fio)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞.', reply_markup=create_keyboard([]))
    

@router1.message(RegistrationStates.waiting_for_fio)
async def get_fio(message: types.Message, state: FSMContext):
    if message.text == STOP_REGISTRATION_BUTTON:
        return await stop_registration(message, state)
    if not is_valid_type(message) or not is_valid_name(message.text):
        await message.answer('–û—à–∏–±–∫–∞: –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤')
        return
    await state.update_data(fio=message.text)
    await state.set_state(RegistrationStates.waiting_for_phone)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')


@router1.message(RegistrationStates.waiting_for_phone)
async def get_phone(message: types.Message, state: FSMContext):
    if message.text == STOP_REGISTRATION_BUTTON:
        return await stop_registration(message, state)
    if not is_valid_type(message) or not is_valid_phone(message.text):
        await message.answer('–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä')
        return
    await state.update_data(phone=message.text)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞', reply_markup=create_keyboard(type_of_reception_options))
    await state.set_state(RegistrationStates.waiting_for_type_of_reception)


@router1.message(RegistrationStates.waiting_for_type_of_reception)
async def get_type_of_reception(message: types.Message, state: FSMContext): 
    if message.text == STOP_REGISTRATION_BUTTON:
        return await stop_registration(message, state)
    if message.text not in type_of_reception_options or not is_valid_type(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.')
        return
    await state.update_data(type_of_reception_selected=message.text)
    if message.text == 'OMC (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)':
        await message.answer('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–¥–µ–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —á–µ—Ç–∫–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è (–∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ)', reply_markup=create_keyboard([]))
        photo = FSInputFile(example_path)
        # –°–æ–∑–¥–∞—ë–º InputFile, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Ñ–∞–π–ª
        await message.answer_photo(photo)
        await state.set_state(RegistrationStates.waiting_for_photo)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=create_keyboard(med_profile_options))
        await state.set_state(RegistrationStates.waiting_for_med_profile)


@router1.message(RegistrationStates.waiting_for_photo)
async def get_photo(message: types.Message, state: FSMContext):
    if message.text == STOP_REGISTRATION_BUTTON:
        return await stop_registration(message, state)
    if message.content_type == 'photo':
        from runner import bot
        file_id = message.photo[-1].file_id
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ BytesIO
        file_data = await bot.download_file(file_path, destination = None)
        if file_data is not None:
            file_data.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
            image = Image.open(file_data)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ NumPy
            img_array = np.array(image)
            gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
            _, binary = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            denoised_photo = cv2.GaussianBlur(binary, (5, 5), 0)
        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=create_keyboard(med_profile_options))
            await state.set_state(RegistrationStates.waiting_for_photo)
        if ITT(img_array):
            await message.answer('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å.', reply_markup=create_keyboard(med_profile_options))
            await state.set_state(RegistrationStates.waiting_for_med_profile)
            user_id = message.from_user.id
            user_photo_path = f'user_photo{user_id}.jpg'
            await bot.download_file(file_path, user_photo_path)
        else:
            await message.answer('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥ –ø—Ä—è–º—ã–º —É–≥–ª–æ–º –∏–ª–∏ –ø—Ä–∏ –ª—É—á—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.')
            await state.set_state(RegistrationStates.waiting_for_photo)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–∞.', reply_markup=create_keyboard([]))
        await state.set_state(RegistrationStates.waiting_for_photo)


@router1.message(RegistrationStates.waiting_for_med_profile)
async def get_med_profile(message: types.Message, state: FSMContext):
    if message.text == STOP_REGISTRATION_BUTTON:
        return await stop_registration(message, state)
    if message.text not in med_profile_options or not is_valid_type(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.')
        return
    await state.update_data(med_profile_selected=message.text)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –ï—Å–ª–∏ —Ç–∞–∫–æ–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–∞–≤—å—Ç–µ 0.', reply_markup=create_keyboard([]))
    await state.set_state(RegistrationStates.waiting_for_additional_info)


@router1.message(RegistrationStates.waiting_for_additional_info)
async def add_information(message: types.Message, state: FSMContext):
    if message.text == STOP_REGISTRATION_BUTTON:
        return await stop_registration(message, state)
    if not is_valid_type(message):
        await message.answer('–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
        return
    await state.update_data(additional_info= message.text if message.text != "0" else "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    user_data = await state.get_data()
    info = (f"–§–ò–û: {user_data['fio']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
            f"–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å: {user_data['med_profile_selected']}\n"
            f"–¢–∏–ø –ø—Ä–∏–µ–º–∞: {user_data['type_of_reception_selected']}\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {user_data['additional_info']}")
    await message.answer(info)
    await message.answer('–£–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?', reply_markup=create_keyboard(last_answer_options))
    await state.set_state(RegistrationStates.waiting_for_confirmation)


@router1.message(RegistrationStates.waiting_for_confirmation)
async def get_type_last_answer(message: types.Message, state: FSMContext):
    if message.text == STOP_REGISTRATION_BUTTON:
        return await stop_registration(message, state)
    if not is_valid_type(message):
        await message.answer('–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
        return
    if message.text == '–î–∞':
        await finale(message.chat.id, message, state)
        await state.clear()
    elif message.text == '–ù–µ—Ç':
        await reception(message, state)

async def finale(chat_id, message: types.Message, state: FSMContext):
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!", reply_markup=submenu_keyboard())
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    fio = user_data.get('fio')
    phone = user_data.get('phone')
    med_profile_selected = user_data.get('med_profile_selected')
    type_of_reception_selected = user_data.get('type_of_reception_selected')
    additional_info = user_data.get('additional_info')
    user_id = message.from_user.id
    user_photo_path = f'user_photo{user_id}.jpg'
    await send_email(admin_email, email_password, fio, phone, med_profile_selected, type_of_reception_selected, additional_info, user_id, user_photo_path)


async def stop_registration(message: types.Message, state: FSMContext):
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=submenu_keyboard())
    await state.clear()

