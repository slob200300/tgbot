from telebot import types
import re
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import io
import numpy as np
import cv2
from PIL import Image
import os
import logging
from config import admin_email, email_password, example_path
from TextRecognition import image_to_text as ITT

user_registrations = {}

class PatientRegistration:
    STOP_REGISTRATION_BUTTON = 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'

    def __init__(self, bot, menu_keyboard_func):
        self.bot = bot
        self.menu_keyboard = menu_keyboard_func
        self.fio = ''
        self.phone = None
        self.med_profile_selected = None
        self.type_of_reception_selected = None
        self.med_profile = [
            '–ê–∫—É—à–µ—Ä-–ì–∏–Ω–µ–∫–æ–ª–æ–≥', '–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥',
            '–ì–µ–º–∞—Ç–æ–ª–æ–≥', '–î–µ—Ä–º–∞—Ç–æ–≤–µ–Ω–µ—Ä–æ–ª–æ–≥', '–ö–∞—Ä–¥–∏–æ–ª–æ–≥',
            '–ù–µ–≤—Ä–æ–ª–æ–≥', '–ù–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥', '–û—Ç–æ—Ä–∏–Ω–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥',
            '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥', '–ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥',
            '–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–π —Ö–∏—Ä—É—Ä–≥', '–¢–æ—Ä–∞–∫–∞–ª—å–Ω—ã–π —Ö–∏—Ä—É—Ä–≥',
            '–¢—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥', '–£—Ä–æ–ª–æ–≥',
            '–•–∏—Ä—É—Ä–≥', '–ß–µ–ª—é—Å—Ç–Ω–æ-–ª–∏—Ü–µ–≤–æ–π —Ö–∏—Ä—É—Ä–≥',
            '–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥'
        ]
        self.type_of_reception = ['OMC (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)', '–ó–∞ —Å—á–µ—Ç –ª–∏—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤',
                                  '–î–ú–° / –î–æ–≥–æ–≤–æ—Ä —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π']
        self.last_answer = ['–î–∞', '–ù–µ—Ç']
        self.additional_information = ''
        self.bot_status = None
        self.ITT_status = 0
        self.photo_path = ''
        self.user_id = []

    def create_keyboard(self, buttons):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        stop_button = types.KeyboardButton(self.STOP_REGISTRATION_BUTTON)
        keyboard.add(stop_button)
        for button in buttons:
            keyboard.add(types.KeyboardButton(button))
        return keyboard

    def registration_keyboard(self):
        return self.create_keyboard([])

    def check_stop_registration(self, message):
        if message.text == self.STOP_REGISTRATION_BUTTON:
            self.stop_registration(message)
            return True
        return False

    def is_valid_type(self, message):
        return message.content_type == 'text'

    def is_valid_input(self, data, pattern):
        return bool(re.match(pattern, data))

    def is_valid_name(self, name):
        return self.is_valid_input(name, r"^[–ê-–Ø–∞-—è–Å—ë\s-]+$")

    def is_valid_phone(self, phone):
        return self.is_valid_input(phone, "^\\d+$")

    def start_registration(self, message):
        self.ITT_status = 0
        self.bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞.', reply_markup=self.registration_keyboard())
        self.bot.register_next_step_handler(message, self.get_fio)

    def get_fio(self, message):
        self.user_id = message.from_user.id
        if not self.is_valid_type(message):
            self.bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.get_fio)
        if self.check_stop_registration(message):
            return
        if not self.is_valid_name(message.text):
            self.bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return self.bot.register_next_step_handler(message, self.get_fio)
        self.fio = message.text
        self.bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        self.bot.register_next_step_handler(message, self.get_phone)

    def get_phone(self, message):
        if not self.is_valid_type(message):
            self.bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.get_phone)
        if self.check_stop_registration(message):
            return
        if not self.is_valid_phone(message.text):
            self.bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return self.bot.register_next_step_handler(message, self.get_phone)
        self.phone = message.text
        self.bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞',
                              reply_markup=self.type_of_reception_keyboard())
        self.bot.register_next_step_handler(message, self.get_type_of_reception)

    def type_of_reception_keyboard(self):
        return self.create_keyboard(self.type_of_reception)

    def get_type_of_reception(self, message):
        if not self.is_valid_type(message):
            self.bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return self.bot.register_next_step_handler(message, self.get_type_of_reception)
        if self.check_stop_registration(message):
            return
        if message.text not in self.type_of_reception:
            self.bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.')
            return self.bot.register_next_step_handler(message, self.get_type_of_reception)
        if message.text == 'OMC (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)':
            photo_path = example_path
            self.bot.send_message(message.from_user.id,'–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–¥–µ–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —á–µ—Ç–∫–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è (–∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ)', reply_markup=self.registration_keyboard())
            self.bot_status = 'waiting'
            self.type_of_reception_selected = message.text
            with open(photo_path, "rb") as photo:
                self.bot.send_photo(message.chat.id, photo)
                self.bot.register_next_step_handler(message, self.get_photo)
        else:
            self.type_of_reception_selected = message.text
            self.bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=self.med_profile_keyboard())
            self.bot.register_next_step_handler(message, self.get_med_profile)

    def get_photo(self, message):
        if message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
            self.stop_registration(message)
            return
        if message.content_type == 'photo':
            file_info = self.bot.get_file(message.photo[-1].file_id)
            file_data = self.bot.download_file(file_info.file_path)
            self.photo_path = 'user_photo.jpg'  # –ò–∑–º–µ–Ω–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            with open(self.photo_path, 'wb') as new_file:
                new_file.write(file_data)
            image = Image.open(io.BytesIO(file_data))
            img_array = np.array(image)
            gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
            _, binary = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            # –£–¥–∞–ª—è–µ–º —à—É–º —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–º—ã—Ç–∏—è
            denoised_photo = cv2.GaussianBlur(binary, (5, 5), 0)
            if ITT(img_array):
                self.ITT_status = 1
                self.bot_status = None
                self.bot.send_message(message.from_user.id, '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É')
                self.bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=self.med_profile_keyboard())
                self.bot.register_next_step_handler(message, self.get_med_profile)
            else:
                self.bot.send_message(message.from_user.id, '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥ –ø—Ä—è–º—ã–º —É–≥–ª–æ–º –∏–ª–∏ –ø—Ä–∏ –ª—É—á—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.',  reply_markup=self.registration_keyboard())
                return self.bot.register_next_step_handler(message, self.get_photo)
        else:
            self.bot.send_message(message.from_user.id,'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–∞', reply_markup=self.registration_keyboard())
            return self.bot.register_next_step_handler(message, self.get_photo)

    def med_profile_keyboard(self):
        return self.create_keyboard(self.med_profile)

    def get_med_profile(self, message):
        if not self.is_valid_type(message):
            self.bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return self.bot.register_next_step_handler(message, self.get_med_profile)
        if self.check_stop_registration(message):
            return
        if message.text not in self.med_profile:
            self.bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.')
            return self.bot.register_next_step_handler(message, self.get_med_profile)
        self.med_profile_selected = message.text
        self.bot.send_message(message.from_user.id,'–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –ï—Å–ª–∏ —Ç–∞–∫–æ–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–∞–≤—å—Ç–µ 0.', reply_markup=self.registration_keyboard())
        self.bot.register_next_step_handler(message, self.add_information)

    def add_information(self, message):
        if not self.is_valid_type(message):
            self.bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return self.bot.register_next_step_handler(message, self.add_information)
        if self.check_stop_registration(message):
            return
        if message.text == "0":
            self.additional_information = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        else:
            self.additional_information = message.text
        info = (f"–§–ò–û: {self.fio}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {self.phone}\n"
                f"–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å: {self.med_profile_selected}\n"
                f"–¢–∏–ø –ø—Ä–∏–µ–º–∞: {self.type_of_reception_selected}\n"
                f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {self.additional_information}")
        self.bot.send_message(message.from_user.id, info)
        self.bot.send_message(message.from_user.id, '–£–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?', reply_markup=self.last_answer_keyboard())
        self.bot.register_next_step_handler(message, self.get_type_last_answer)

    def last_answer_keyboard(self):
        return self.create_keyboard(self.last_answer)

    def get_type_last_answer(self, message):
        if not self.is_valid_type(message):
            self.bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
            return self.bot.register_next_step_handler(message, self.get_type_last_answer)
        if self.check_stop_registration(message):
            return
        if message.text not in self.last_answer:
            self.bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.')
            return self.bot.register_next_step_handler(message, self.get_type_last_answer)
        if message.text == '–î–∞':
            self.finale(message.chat.id)
        elif message.text == '–ù–µ—Ç':
            self.start_registration(message)

    def stop_registration(self, message):
        self.bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=self.menu_keyboard())

    def finale(self, chat_id):
        self.bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!", reply_markup=self.menu_keyboard())
        self.send_email(self.photo_path)
        print(user_registrations)

    def send_email(self, attachment_path):
        subject = "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º"
        body = self.create_email_body()
        msg = self.prepare_email_message(subject, body, attachment_path)
        try:
            self.send_email_message(msg)
            self.cleanup_attachment(attachment_path)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")

    def create_email_body(self):
        return f"""
        <html>
            <body>
                <h2 style="font-size: 24px;">–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º:</h2>
                <ul style="font-size: 18px;">
                    <li><strong>–§–ò–û:</strong> {self.fio}</li>
                    <li><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {self.phone}</li>
                    <li><strong>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> {self.med_profile_selected}</li>
                    <li><strong>–¢–∏–ø –ø—Ä–∏–µ–º–∞:</strong> {self.type_of_reception_selected}</li>
                    <li><strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> {self.additional_information}</li>
                    <li><strong>ID –ø–∞—Ü–∏–µ–Ω—Ç–∞:</strong> {self.user_id}</li>
                    <li><strong>–§–æ—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ:</strong> {'–î–∞' if self.ITT_status == 1 else '–ù–µ—Ç'}</li>
                </ul>
            </body>
        </html>
        """

    def prepare_email_message(self, subject, body, attachment_path):
        msg = MIMEMultipart()
        msg['Subject'] = subject
        msg['From'] = admin_email
        msg['To'] = admin_email
        msg.attach(MIMEText(body, 'html'))

        if os.path.isfile(attachment_path):
            try:
                with open(attachment_path, 'rb') as attachment:
                    part = MIMEBase('application', 'octet-stream')
                    part.set_payload(attachment.read())
                    encoders.encode_base64(part)
                    part.add_header('Content-Disposition',
                                    f'attachment; filename="{os.path.basename(attachment_path)}"')
                    msg.attach(part)
            except Exception as e:
                logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–ª–æ–∂–µ–Ω–∏—è: {e}')
        else:
            logging.warning(f'–§–∞–π–ª "{attachment_path}" –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.')

        return msg

    def send_email_message(self, msg):
        with smtplib.SMTP('smtp.office365.com', 587) as server:
            server.starttls()
            server.login(admin_email, email_password)
            server.send_message(msg)
        logging.info("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")

    def cleanup_attachment(self, attachment_path):
        try:
            if os.path.isfile(attachment_path):
                os.remove(attachment_path)
                logging.info(f"{attachment_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            else:
                logging.warning(f"{attachment_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {attachment_path}: {e}")