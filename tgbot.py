import logging
from aiogram import F, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import StateFilter, CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from config import link2, reseption_answer, med_price_info, add_price_message, med_profile


logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
router = Router()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class RegistrationStatesMain(StatesGroup):
    waiting_for_price_profile = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def submenu_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –≤—Ä–∞—á–∞')], [KeyboardButton(text = '–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É?')],
    [KeyboardButton(text='–ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏'), KeyboardButton(text = '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã ')], [KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É')]])
    return keyboard


def med_profile_keyboard(buttons=None):
    if buttons is None:
        buttons = []
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥'))
    for button in buttons:
        if isinstance(button, str):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ ‚Äî —Å—Ç—Ä–æ–∫–∞
            keyboard.add(KeyboardButton(text=button))
    return keyboard.adjust(1).as_markup(resize_keyboard=True)

def price_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text='–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞')], [KeyboardButton(text = '–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?')],
    [KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')]])
    return keyboard

@router.message(CommandStart())
async def send_welcome(message: Message):
    photo = FSInputFile('/home/sou-3.2-2/chatbot/vokb_logotip2.png')
    # –°–æ–∑–¥–∞—ë–º InputFile, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Ñ–∞–π–ª
    await message.answer_photo(photo, caption="üåü –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä –í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–Ω–æ–π –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–π –±–æ–ª—å–Ω–∏—Ü—ã ‚Ññ1. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å: üí¨", reply_markup=submenu_keyboard())

@router.message(F.text == "–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É?")
async def send_info(message: Message):
    await message.answer(reseption_answer, reply_markup=submenu_keyboard())

@router.message(F.text == "–ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏")
async def paid_services(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å.", reply_markup=price_keyboard())

@router.message(F.text == "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞")
async def send_price(message: Message, state: FSMContext):
    print("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å.", reply_markup=med_profile_keyboard(med_profile))
    await state.set_state(RegistrationStatesMain.waiting_for_price_profile)

@router.message(StateFilter(RegistrationStatesMain.waiting_for_price_profile))
async def price_filter(message: Message, state: FSMContext):
    if message.content_type != 'text':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–∏–ª—è.", reply_markup=med_profile_keyboard(med_profile))
        return
    if message.text == '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥':
        await state.clear()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        return await back_to_price(message)
    # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    profile = message.text
    if profile in med_price_info:
        price_message = '\n'.join(f"{procedure}: {price}‚ÇΩ" for procedure, price in med_price_info[profile].items())
        await message.answer(price_message + '(–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞)', reply_markup=med_profile_keyboard(med_profile))
    else:
        await message.answer("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é.", reply_markup=med_profile_keyboard(med_profile))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ
@router.message(F.text == "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?")
async def payment_instruct(message: Message):
    await message.answer(add_price_message, reply_markup=price_keyboard())

@router.message(F.text == "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã")
async def specialist(message: Message):
    await message.answer('–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –ì–ë–£–ó ¬´–í–û–ö–ë ‚Ññ1¬ª: ' + link2, reply_markup=submenu_keyboard())

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def one_step_back(message: Message):
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=submenu_keyboard())

@router.message(F.text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥")
async def back_to_price(message: Message):
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥', reply_markup=price_keyboard())

@router.message()
async def handle_random_messages(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=submenu_keyboard())
