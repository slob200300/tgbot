from telebot import types
import re
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import io
import os
import logging
from config import admin_email, email_password


user_cancelation = {}

logging.basicConfig(level=logging.INFO)

class CancelRegistration:
    STOP_REGISTRATION_BUTTON = 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å'

    def __init__(self, bot, menu_keyboard_func):
        self.bot = bot
        self.menu_keyboard = menu_keyboard_func
        self.fio = ''
        self.med_profile_selected = None
        self.additional_information = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        self.user_id = None
        self.med_profile = [
            '–ê–∫—É—à–µ—Ä-–ì–∏–Ω–µ–∫–æ–ª–æ–≥', '–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥', '–ì–µ–º–∞—Ç–æ–ª–æ–≥', 
            '–î–µ—Ä–º–∞—Ç–æ–≤–µ–Ω–µ—Ä–æ–ª–æ–≥', '–ö–∞—Ä–¥–∏–æ–ª–æ–≥', '–ù–µ–≤—Ä–æ–ª–æ–≥', 
            '–ù–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥', '–û—Ç–æ—Ä–∏–Ω–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥', '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥', 
            '–ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥', '–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–π —Ö–∏—Ä—É—Ä–≥', 
            '–¢–æ—Ä–∞–∫–∞–ª—å–Ω—ã–π —Ö–∏—Ä—É—Ä–≥', '–¢—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥', '–£—Ä–æ–ª–æ–≥', 
            '–•–∏—Ä—É—Ä–≥', '–ß–µ–ª—é—Å—Ç–Ω–æ-–ª–∏—Ü–µ–≤–æ–π —Ö–∏—Ä—É—Ä–≥', '–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥'
        ]
        self.last_answer = ['–î–∞', '–ù–µ—Ç']

    def create_keyboard(self, buttons):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        stop_button = types.KeyboardButton(self.STOP_REGISTRATION_BUTTON)
        keyboard.add(stop_button)
        for button in buttons:
            keyboard.add(types.KeyboardButton(button))
        return keyboard

    def check_stop_registration(self, message):
        if message.text == self.STOP_REGISTRATION_BUTTON:
            self.stop_registration(message)
            return True
        return False

    def is_valid_type(self, message):
        return message.content_type == 'text'

    def stop_registration(self, message):
        self.bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=self.menu_keyboard())

    def cancel_registration(self, message):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        self.bot.send_message(message.from_user.id, '–î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.', reply_markup=self.create_keyboard([]))
        self.bot.register_next_step_handler(message, self.get_fio)

    def get_fio(self, message):
        """–ü–æ–ª—É—á–∞–µ—Ç –§–ò–û –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if self.check_stop_registration(message):
            return
        if not self.is_valid_type(message):
            self.bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")
            return self.bot.register_next_step_handler(message, self.get_fio)
        self.user_id = message.from_user.id
        self.fio = message.text
        self.bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.', reply_markup=self.med_profile_keyboard())
        self.bot.register_next_step_handler(message, self.get_med_profile)

    def med_profile_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."""
        return self.create_keyboard(self.med_profile)

    def get_med_profile(self, message):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if self.check_stop_registration(message):
            return
        if not self.is_valid_type(message) or message.text not in self.med_profile:
            self.bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.')
            return self.bot.register_next_step_handler(message, self.get_med_profile)
        self.med_profile_selected = message.text
        self.bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –ï—Å–ª–∏ —Ç–∞–∫–æ–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–∞–≤—å—Ç–µ 0.', reply_markup=self.create_keyboard([]))
        self.bot.register_next_step_handler(message, self.add_information)

    def add_information(self, message):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if self.check_stop_registration(message):
            return
        if not self.is_valid_type(message):
            self.bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")
            return self.bot.register_next_step_handler(message, self.add_information)
        if message.text == "0":
            self.additional_information = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        else:
            self.additional_information = message.text
        self.bot.send_message(message.from_user.id, '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏?', reply_markup=self.last_answer_keyboard())
        self.bot.register_next_step_handler(message, self.get_confirmation)

    def last_answer_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
        return self.create_keyboard(self.last_answer)

    def get_confirmation(self, message):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if self.check_stop_registration(message):
            return
        if not self.is_valid_type(message) or message.text not in self.last_answer:
            self.bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.')
            return self.bot.register_next_step_handler(message, self.get_confirmation)
        if message.text == '–î–∞':
            self.finalize_cancellation(message.from_user.id)
        else:
            self.bot.send_message(message.from_user.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.', reply_markup=self.menu_keyboard())

    def finalize_cancellation(self, user_id):
        """–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        self.bot.send_message(user_id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É, –í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=self.menu_keyboard())
        self.send_email()

    def send_email(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ—á—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        subject = "–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –≤—Ä–∞—á–∞ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º"
        body = self.create_email_body()
        msg = MIMEMultipart()
        msg['Subject'] = subject
        msg['From'] = admin_email
        msg['To'] = admin_email
        msg.attach(MIMEText(body, 'html'))
        
        try:
            with smtplib.SMTP('smtp.office365.com', 587) as server:
                server.starttls()
                server.login(admin_email, email_password)
                server.send_message(msg)
            logging.info("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ: {e}")

    def create_email_body(self):
        """–°–æ–∑–¥–∞–µ—Ç HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞."""
        return (f"""
        <html>
            <body>
                <h2 style="font-size: 24px;">–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º:</h2>
                <ul style="font-size: 18px;">
                    <li><strong>–§–ò–û:</strong> {self.fio}</li>
                    <li><strong>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> {getattr(self, 'med_profile_selected', '–ù–µ –≤—ã–±—Ä–∞–Ω')}</li>
                    <li><strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> {self.additional_information}</li>
                    <li><strong>ID –ø–∞—Ü–∏–µ–Ω—Ç–∞:</strong> {self.user_id}</li>
                </ul>
            </body>
        </html>
        """)



