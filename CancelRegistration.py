import logging
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from aiogram import types, F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import KeyboardButton
from config import admin_email, email_password
from tgbot import submenu_keyboard


logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
router2 = Router()


class CancelRegistrationStates(StatesGroup):
    waiting_for_fio = State()
    waiting_for_med_profile = State()
    waiting_for_additional_info = State()
    waiting_for_confirmation = State()

STOP_REGISTRATION_BUTTON = 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å'

med_profile_options = [
    '–ê–∫—É—à–µ—Ä-–ì–∏–Ω–µ–∫–æ–ª–æ–≥', '–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥', '–ì–µ–º–∞—Ç–æ–ª–æ–≥',
    '–î–µ—Ä–º–∞—Ç–æ–≤–µ–Ω–µ—Ä–æ–ª–æ–≥', '–ö–∞—Ä–¥–∏–æ–ª–æ–≥', '–ù–µ–≤—Ä–æ–ª–æ–≥',
    '–ù–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥', '–û—Ç–æ—Ä–∏–Ω–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥', '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥',
    '–ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥', '–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–π —Ö–∏—Ä—É—Ä–≥',
    '–¢–æ—Ä–∞–∫–∞–ª—å–Ω—ã–π —Ö–∏—Ä—É—Ä–≥', '–¢—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥', '–£—Ä–æ–ª–æ–≥',
    '–•–∏—Ä—É—Ä–≥', '–ß–µ–ª—é—Å—Ç–Ω–æ-–ª–∏—Ü–µ–≤–æ–π —Ö–∏—Ä—É—Ä–≥', '–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥'
]
last_answer_options = ['–î–∞', '–ù–µ—Ç']

def create_keyboard(buttons):
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text=STOP_REGISTRATION_BUTTON))
    for button in buttons:
        keyboard.add(KeyboardButton(text=button))
    return keyboard.adjust(1).as_markup(resize_keyboard=True)

def is_valid_type(message):
    return message.content_type == 'text'


@router2.message(F.text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É')
async def cancel_registration(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    await message.answer('–î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.', reply_markup=create_keyboard([]))
    await state.set_state(CancelRegistrationStates.waiting_for_fio)

@router2.message(CancelRegistrationStates.waiting_for_fio)
async def get_fio(message: types.Message, state: FSMContext):
    if message.text == STOP_REGISTRATION_BUTTON:
        await stop_registration(message, state)
        return
    if not is_valid_type(message):
        await message.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return
    await state.update_data(fio=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.', reply_markup=create_keyboard(med_profile_options))
    await state.set_state(CancelRegistrationStates.waiting_for_med_profile)

@router2.message(CancelRegistrationStates.waiting_for_med_profile)
async def get_med_profile(message: types.Message, state: FSMContext):
    if message.text == STOP_REGISTRATION_BUTTON:
        await stop_registration(message, state)
        return
    if message.text not in med_profile_options or not is_valid_type(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.')
        return
    await state.update_data(med_profile_selected=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –ï—Å–ª–∏ —Ç–∞–∫–æ–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–∞–≤—å—Ç–µ 0.', reply_markup=create_keyboard([]))
    await state.set_state(CancelRegistrationStates.waiting_for_additional_info)

@router2.message(CancelRegistrationStates.waiting_for_additional_info)
async def add_information(message: types.Message, state: FSMContext):
    if message.text == STOP_REGISTRATION_BUTTON:
        await stop_registration(message, state)
        return
    if not is_valid_type(message):
        await message.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return
    await state.update_data(additional_info=message.text if message.text != "0" else "–ù–µ —É–∫–∞–∑–∞–Ω–æ")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await message.answer('–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏?', reply_markup=create_keyboard(last_answer_options))
    await state.set_state(CancelRegistrationStates.waiting_for_confirmation)

@router2.message(CancelRegistrationStates.waiting_for_confirmation)
async def get_confirmation(message: types.Message, state: FSMContext):
    if message.text == STOP_REGISTRATION_BUTTON:
        await stop_registration(message, state)
        return
    if message.text not in last_answer_options or not is_valid_type(message):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.')
        return
    if message.text == '–î–∞':
        await finalize_cancellation(message.chat.id, message, state)
    else:
        await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.', reply_markup=submenu_keyboard())
        await state.clear()

async def finalize_cancellation(user_id, message: types.Message, state: FSMContext):
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É, –í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=submenu_keyboard())
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    fio = user_data.get('fio')
    med_profile_selected = user_data.get('med_profile_selected')
    additional_info = user_data.get('additional_info')
    await send_email(fio, med_profile_selected, additional_info, user_id)
    await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏


async def stop_registration(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=submenu_keyboard())
    await state.clear()

async def send_email(fio, med_profile_selected, additional_info, user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ—á—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    subject = "–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –≤—Ä–∞—á–∞ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º"
    body = await create_email_body(fio, med_profile_selected, additional_info, user_id)
    msg = MIMEMultipart()
    msg['Subject'] = subject
    msg['From'] = admin_email
    msg['To'] = admin_email
    msg.attach(MIMEText(body, 'html'))
    
    try:
        with smtplib.SMTP('smtp.office365.com', 587) as server:
            server.starttls()
            server.login(admin_email, email_password)
            server.send_message(msg)
        logging.info("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ: {e}")

async def create_email_body(fio, med_profile_selected, additional_info, user_id):
    """–°–æ–∑–¥–∞–µ—Ç HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞."""
    return f"""
    <html>
        <head>
            <style>
                body {{
                    font-family: Arial, sans-serif;
                    line-height: 1.6;
                    margin: 20px;
                    color: #333;
                }}
                h2 {{
                    color: #4CAF50;
                    font-size: 24px;
                    margin-bottom: 10px;
                }}
                ul {{
                    list-style-type: none;
                    padding: 0;
                }}
                li {{
                    background: #f4f4f4;
                    margin: 10px 0;
                    padding: 10px;
                    border-radius: 5px;
                    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                }}
                strong {{
                    color: #000;
                }}
                .divider {{
                    height: 1px;
                    background: #ddd;
                    margin: 20px 0;
                }}
            </style>
        </head>
        <body>
            <h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –≤—Ä–∞—á–∞:</h2>
            <ul>
                <li><strong>–§–ò–û –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> {fio}</li>
                <li><strong>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> {med_profile_selected}</li>
                <li><strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> {additional_info}</li>
                <li><strong>ID –ø–∞—Ü–∏–µ–Ω—Ç–∞:</strong> {user_id}</li>
            </ul>
            <div class="divider"></div>
            <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!</p>
        </body>
    </html>
    """